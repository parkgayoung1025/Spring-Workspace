<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- 
		주소 자동 완성 도구
		매번 같은 주소(/WEB-INF/views/)를 추가해야 하기 때문에 자동 완성이 기본적으로 등록되어 있음
		- view resolver라는 도구를 등록(spring 제공)
		- class : InternalResourceViewResolver
		- prefix : 접두어 / suffix : 접미어
		- return할 파일명을 제시하는 부분에 접두어, 접미어를 붙여서 forward하겠다
	 -->
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 
		base-package에 등록된 패키지와 그 하위 패키지 모두 감시(scan)해서 빈으로 등록 가능한 클래스들은 spring-bean 객체로 등록해둠
	 -->
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- 
		Interceptor : 컨트롤러에 요청이 들어가기 전/후를 나눠서 인터셉터가 중간에 요청을 가로챔
					  스프링의 모든 빈 객체에 접근이 가능하며, 일반적으로 로그인 체크, 권한 체크, 프로그램 실행 시간 체크 등에 사용된다.
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
				<beans:bean class="com.kh.spring.common.interceptor.BoardTypeInterceptor"/>
		</mvc:interceptor>
		
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
				<beans:bean class="com.kh.spring.common.interceptor.LoggingInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 
		interceptor 특징
		1. dispatcherServlet이 controller를 호출하기 전/후로 끼어드기 때문에 controller에 전달하기 전인 
		   request와 response의 데이터를 처리하기에 용이하며, application영역에 사용하는 객체에 대한 설정을 하기에도 좋다.
		
		2. AOP는 주로 트랜잭션 처리(@Transactional), 로깅 처리 등 비즈니스단의 메서드에서 더 "세밀하게" 조정하고 싶을 때 사용하면 된다.
		
		종합해 보면
		컨트롤러에 공통적으로 적용할 부가기능이라면 -> 핸들러 인터셉터를 이용하는 편이 낫다.
		"세밀하게" 조정하고 싶은 기능이라면? -> Spring AOP를 이용하는 게 낫다.
		
		스프링 요청/응답 흐름
		- 요청(request) -> Filter -> DispatcherServlet(HandlerMapping) -> Interceptor -> Controller -> AOP -> Service -> Dao
																															 (DB)
		- 응답 <- Filter <- DispatcherServlet(ViewResolver) <- Interceptor <- Controller <- AOP <- Service <- Dao 
	 -->
	 
	 <aop:aspectj-autoproxy proxy-target-class="false"/>
	 <!-- 
	 	proxy-target-class : 프록시라는 객체를 생성 시 interface or class로 프록시 객체를 생성할지를 정하는 구문
	 						 기본값 true -> 프록시 객체를 생성 시 클래스로 만들어줌
	 						 일반적으로 프록시 객체는 자바에서 기본적으로 제공하는 다이나믹 프록시 interface로 생성.
	 						 클래스로 생성하게 되면 cglib 라이브러리를 이용해서 프록시 객체를 생성하는데 이슈가 있어서 사용하지 않는 걸 권장.
	  -->
	 
	 <!-- 트랜잭션 처리 시 필요한 @Transactional 어노테이션 활성화시키기
	 	  @Transactional : 클래스 혹은 메서드 수행 후에 트랜잭션을 처리하라고 알려주는 어노테이션 -->
	 <tx:annotation-driven transaction-manager="transactionManager"/>
	 
	 <!-- webSocket 요청 시 핸들러 클래스와 연걸하기 -->
	 <beans:bean id="chatHandler" class="com.kh.spring.chat.model.websocket.ChatWebsocketHandler"/>
	 
	 <websocket:handlers>
	 	<!-- 웹소켓 요청 시 요청 주소를 처리할 bean 객체 지정 -->
	 	<websocket:mapping handler="chatHandler" path="/chat"/>
	 	
	 	<websocket:handshake-interceptors>
	 		<!-- 
	 			interceptor : http 통신에서 request와 response를 가로채는 역할
	 			
	 			handshake-interceptores : 요청 관련 데이터 중 httpSession 정보를 가로채서 webSocketSession에게 넣어줌
	 		 -->
	 		 <beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
	 	</websocket:handshake-interceptors>
	 	
	 	<!-- SocketJS 라이브러리를 이용해서 만들어진 웹소켓 객체임을 의미한다. -->
	 	<websocket:sockjs/>
	 </websocket:handlers>
	 
	 <!-- 
	 	HandlerMapping을 통해서 어떤 url로 요청했을 때 어떤 controller가 구동될 것인지를 알아내야 한다.
	 	
	 	1. 요청 때마다 실행될 controller들을 bean으로 등록시켜두기
		  <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
		  <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
		  <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
		  .. (등록할 컨트롤러 개수만큼 bean을 등록시켜줘야 함)
		2. 어떤 url로 요청이 들어온 것을 처리할 것인지 매핑 시켜줘야 한다.
		  <beans:bean class="org.springframework.web.servlet.handler.simpleUrlHandlerMapping">
		  	<beans:property name="mappings">
		  		<bean:prop key="login">memberController</bean:prop>
		  		<bean:prop key="insert">memberController</bean:prop>
		  	</beans:property>
		  </beans:bean>
		  
		  위와 같은 방식으로 xml로 빈을 등록을 한다면, bean 개수가 너무 많아지면 관리가 어려워진다.
		  또한, 여러 개발자가 같은 xml 파일을 수정하면 충돌이 쉽게 발생할 수 있다.
		  
		  장점 : xml 문서 내에 한 눈으로 볼 수 있기 때문에 관리의 편의성이 높음
		  
		  * 어노테이션 방식
		  - component-scan에서 지정한 패키지명(com.kh.spring)의 하위 모든 클래스를 스캔하여
		  @Controller와 같은 MVC 어노테이션이 붙은 클래스를 자동으로 bean으로 등록해 주는 방식
		  @Service
		  @Repository
		  ...
		  
		  단, 내가 직접 만든 클래스가 아닐 경우(spring에서 제공하는 클래스이거나 컴파일된 class일 경우) 소스 코드 내부를
		  수정할 수 없기 때문에 코드에 어노테이션을 붙일 수가 없다. 따라서 이 경우에는 xml 방식으로 bean을 등록해 줘야 한다.
	  -->
	
</beans:beans>
