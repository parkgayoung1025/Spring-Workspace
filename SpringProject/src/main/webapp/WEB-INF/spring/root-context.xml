<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 
		root-context.xml
		서버 구동과 동시에 web.xml 파일을 거쳐서 곧바로 로딩되는 문서
		- 보통 서버 구동과 동시에 세팅해야 하는 내용들 작성함(db연결, 트랜잭션 처리)
	 -->
	 
	 <!-- DB연결 설정(3단계) -->
	 <!-- 1단계 DB연결을 위한 도구 설정 
	 	  dataSource : java에서 Connection Pool을 지원하기 위한 인터페이스
	 	  destory-method="close" : 주어진 세션을 자동으로 반환하는 설정
	 -->                                                 <!-- id 값이 변수명 -->
	 <bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
	 	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	 	<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
	 	<property name="username" value="SPRING"/>
	 	<property name="password" value="SPRING"/>
	 	
	 	<!-- SQL이 수행된 후 자동으로 commit 되는 것을 지정 -->
	 	<property name="defaultAutoCommit" value="false"/> 
	 	
	 	<!-- 커넥션풀 설정 -->
	 	<property name="initialSize" value="10"/> <!-- 초기 커넥션 수, 기본 0 -->
	 	<property name="maxActive" value="50"/> <!-- 최대 커넥션 수, 기본 8 -->
	 	<property name="minIdle" value="10"/> <!-- 유휴 상태로 존재할 수 있는 커넥션 최소 수, 기본 0 -->
	 	<property name="maxIdle" value="20"/> <!-- 유휴 상태로 존재할 수 있는 커넥션 최대 수, 기본 8 -->
	 	<property name="maxWait" value="-1"/> <!-- 예외 발생 전 커넥션이 반환될 때 까지 대기하는 시간, 기본 -1(무기한) -->
	 </bean>
	 
	 <!-- 
	 	log4j를 이용한 SQL로그 출력용 BEAN 생성
	 	
	 	* realDataSource 이용해서 SQL 수행 내용, 수행 결과를 울력하는 역할
	  -->
	 <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
	 	<constructor-arg ref="realDataSource"/>
	 	<property name="logFormatter">
	 		<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
	 			<property name="loggingType" value="MULTI_LINE"/>
	 			<property name="sqlPrefix" value="[SQL]"/>
	 		</bean>
	 	</property>
	 </bean>
	 
	 <!-- 
	 	BasicDataSource dataSource = new BasicDataSource();
	 	dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
	  -->
	  
	  <!-- 
	  	2단계 MyBatis Spring에서 제공하는 sql 명령어 실행을 위한 도구 등록
	  	SqlSession : sql 구문을 db에 전달, 실행하는 객체
	  	
	  	SqlSessionFactory : SqlSession을 만드는 객체
	  	SqlSessionFactoryBean : mybatis 설정 파일과 Connection pool 정보를 이용하여 SqlSessionFactory를 만드는 객체
	  	SqlSessionTemplate : SqlSession 객체에 트랜잭션 처리 역할이 가능하도록 하는 객체
	   -->
	   <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
	   		<!-- mybatis 설정 파일 위치를 지정 -->
	   		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	   		
	   		<!-- 연결을 위한 도구 -->
	   		<property name="dataSource" ref="dataSource"/>
	   </bean>
	   <!-- 
	   		내부적으로 객체를 필요할 때 실행되는 코드
	   		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
	   		sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
	   		sqlSessionFactory.setDataSource(dataSource);
	    -->
	    
	    <!-- 3단계 SQL 구문 실행을 위한 템플릿을 제공하는 도구 등록
	    	 SqlSessionTemplate : 기본 SQL문 실행 + 트랜잭션 관리 -->
	    <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
	    	<!-- Sql 명령어 실행을 위한 도구에 대한 참조 변수 필요 -->
	    	<constructor-arg ref="sqlSessionFactory"/>
	    </bean>
	    
	    <!-- SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory); -->
	    
	    <!-- 
	    	property => setter를 통해 값을 주입
	    	constructor-arg => 매개 변수있는 생성자를 통해 값을 주입
	     -->
	     
	     <!-- 스프링에서 사용하는 proxy를 이용한 트랜잭션 제어가 안 먹힐 경우 트랜잭션 매니저를 추가 -->
	     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	     	<property name="dataSource" ref="dataSource"></property>
	     </bean>
	     
	     <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
	     	<!-- defaultEncoding : 업로드 되는 파일에 대한 인코딩 처리 여부 -->
	     	<property name="defaultEncoding" value="UTF-8"/>
	     	
	     	<!-- 
	     		maxUploadSize : 한 번에 전체 업로드 되는 파일의 총 용량 설정
	     	 -->
	     	<property name="maxUploadSize" value="10000000"/> <!-- 10mbyte -->
	     	
	     	<!-- 
	     		maxInMemorySize : 디스크에 임시 파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트 크기
	     	 --> 
	     	 <property name="maxInMemorySize" value="10000000"/>
	     </bean>
		
</beans>
